package Moose::Documents::Chinese::Manual::Roles;

# ABSTRACT: 角色，另一種階層和基礎類別

__END__

=pod

=encoding utf8

=head1 什麼是角色

一個角色封裝了一些可以在類別間分享的行為或是狀態。
那是一些類別可以I<作>的東西。
了解I<角色並非類別>是件重要的事。
你不能繼承角色，而角色不能被初始化。
我們有時會說角色被類別或是其他角色I<吸收>。

相反地，一個角色被I<組合>進一個類別。
從實務角度來看，這代表所有定義在角色內的方法，方法修飾子，和屬性都被直接加入（我們有時候說「鋪入（flattened into）」）吸收此角色的類別。
這些屬性和方法就變得好像定義在此類別中一樣。
此類別的子類別也會繼承到這些這些屬性和方法。

Moose 的角色和其他語言中的混和（mixins）或介面（interfaces）很像。

除了定義他們自己的方法或是屬性，角色也可以要求吸收它的類別自行定義某些方法。
你可以有個角色只由一份必要方法的清單組成，這時它就很像 Java 的介面。

注意在滿足角色的要求時，屬性存取器也會被當作方法。

=head1 一個簡單的角色

建立一個角色很像是建立一個 Moose 類別：

  package Breakable;

  use Moose::Role;

  has 'is_broken' => (
      is  => 'rw',
      isa => 'Bool',
  );

  sub break {
      my $self = shift;

      print "I broke\n";

      $self->is_broken(1);
  }

除了使用 L<Moose::Role>，這看起來就像是 Moose 類別定義。
不過這不是個類別，也不能被初始化。

相反地，他的屬性和方法會被組合進入使用此角色的類別：

  package Car;

  use Moose;

  with 'Breakable';

  has 'engine' => (
      is  => 'ro',
      isa => 'Engine',
  );

C<with> 這個函式把角色組合進類別。
組合完後，C<Car> 這個類別就有了 C<is_broken> 屬性和 C<break> 方法。
C<Car> 類別也變得可破壞（C<does('Breakable')>）：

  my $car = Car->new( engine => Engine->new );

  print $car->is_broken ? 'Busted' : 'Still working';
  $car->break;
  print $car->is_broken ? 'Busted' : 'Still working';

  $car->does('Breakable'); # true

這會印出

  Still working
  I broke
  Busted

我們也可以把同樣的角色用在 C<Bone> 類別：

  package Bone;

  use Moose;

  with 'Breakable';

  has 'marrow' => (
      is  => 'ro',
      isa => 'Marrow',
  );

請同時參考 L<Moose::Documents::Chinese::Cookbook::Roles::Comparable_CodeReuse> 中的範例。

=head1 必要方法

如前所述，一個角色可以要求吸收它的類別提供方法。
以 C<Breakable> 為例，我們讓它要求吸收它的類別自行實作 C<break> 方法。

  package Breakable;

  use Moose::Role;

  requires 'break';

  has 'is_broken' => (
      is  => 'rw',
      isa => 'Bool',
  );

  after 'break' => sub {
      my $self = shift;

      $self->is_broken(1);
  };

如果我們試著在沒有 C<break> 方法的類別中吸收此角色，我們會得到一個例外。

你可以看到我們還對 C<break> 方法加上一個方法修飾子。
我們希望吸收此角色的類別實作他們自己的破壞方法，但我們也確保 C<is_broken> 屬性也會在 C<break> 被呼叫後被設定為真。

  package Car

  use Moose;

  with 'Breakable';

  has 'engine' => (
      is  => 'ro',
      isa => 'Engine',
  );

  sub break {
      my $self = shift;

      if ( $self->is_moving ) {
          $self->stop;
      }
  }

=head2 角色與抽象基礎類別的對比

如果你熟悉其他語言中抽象基礎類別的觀念，你也許會很想用同樣方式使用角色。

你I<可以>定義一個「只有介面」的角色，這角色I<只>包含一個必要方法的清單。

不過，任何吸收此角色的類別必須實作所有必要方法，無論是直接實作或是從父類別繼承。
You cannot delay the method requirement check so that they can
be implemented by future subclasses.

因為角色直接定義必要方法，加入一個基礎類別來混入不會有額外好處。
我們建議你就直接在每個實作此介面的類別中吸收此介面角色。

=head2 必要屬性

如前所述，一個角色的必要方法也可以實作成屬性存取器。
不過，呼叫 C<has> 去定義屬性是發生在執行時期（runtime）。
這意味著你必須在吸收類別I<前>就定義屬性，否則此角色不會看到被產生的存取器。

  package Breakable;

  use Moose::Role;

  requires 'stress';

  package Car;

  use Moose;

  has 'stress' => (
      is  => 'rw',
      isa => 'Int',
  );

  with 'Breakable';

=head1 使用方法修飾子

方法修飾子和角色是非常有用的組合。
通常，一個角色會結合方法修飾子和必要方法。
我們已經從我們的 C<Breakable> 角色看到一個範例。

方法修飾子增加角色的複雜性，這關係到角色的套用順序。
如果一個類別使用許多角色，每個角色都修飾同一方法，這些修飾子會如他們宣告時的順序被套用：

  package MovieCar;

  use Moose;

  extends 'Car';

  with 'Breakable', 'ExplodesOnBreakage';

假設這新的 C<ExplodesOnBreakage> 角色I<也>有一個對 C<break> 的 C<after> 修飾子。
此修飾子會在另一修飾子後執行。
C<Breakable> 中的修飾子先執行，然後才輪到 C<ExplodesOnBreakage>。

=head1 方法衝突

如果類別用了許多角色，且這些角色有同名方法，此時會有衝突。
這種狀況下，此類別會被要求I<自行>提供同名方法。

  package Breakdancer;

  use Moose::Role

  sub break {

  }

如果我們在一類別中組合 C<Breakable> 和 C<Breakdancer>，就得自行提供自己的 C<break> 方法：

  package FragileDancer;

  use Moose;

  with 'Breakable', 'Breakdancer';

  sub break { ... }

一個角色可以作為一群角色的集合：

  package Break::Bundle;

  use Moose::Role;

  with ('Breakable', 'Breakdancer');

=head1 方法排除和別名

如果我們希望我們的 C<FragileDancer> 類別可以從兩個角色呼叫 C<break> 方法，我們可以建立方法別名：

  package FragileDancer;

  use Moose;

  with 'Breakable'   => { -alias => { break => 'break_bone' } },
       'Breakdancer' => { -alias => { break => 'break_dance' } };

不過，別名只是把此方法I<複製>到新名字。
我們也需要排除原本的名字。

  with 'Breakable' => {
      -alias    => { break => 'break_bone' },
      -excludes => 'break',
      },
      'Breakdancer' => {
      -alias    => { break => 'break_dance' },
      -excludes => 'break',
      };

排除參數避免 C<break> 方法被組合入 C<FragileDancer> 類別，所以我們不會得到衝突。
這代表 C<FragileDancer> 不需要實作其本身的 C<break> 方法。

這很有用，不過它破壞了吸收此角色時隱含的合約。
我們的 C<FragileDancer> 可同時作為 C<Breakable> 和 C<BreakDancer> 類別，不過並沒有提供 C<break> 方法。
如果一些可程式化介面（API）接收一個作為此角色的物件，它會期待此物件有實作 C<break> 方法。

在一些使用案例中，我們也許會對角色方法作別名和排除，但是會接著在類別中提供同名方法。

請閱讀 L<Moose::Documents::Chinese::Cookbook::Roles::Restartable_AdvancedComposition> 中的範例。

=head1 角色排除

一個角色也可以說它不能和其他某些角色結合使用。
這需要小心使用，因為它限制了此角色可複用性。

  package Breakable;

  use Moose::Role;

  excludes 'BreakDancer';

=head1 把角色加入物件實例

你也許想把角色加入物件實例中，而非加入類別。
例如，在對特定問題除錯時，你也許希望針對一個實例來除錯。
另一個使用案例可能是基於使用者的設定檔來動態調整物件，像是一個外掛系統。

使用 L<Moose::Util> 的 C<apply_all_roles()> 函式是最好的作法：

  use Moose::Util qw( apply_all_roles );

  my $car = Car->new;
  apply_all_roles( $car, 'Breakable' );

這個函式可以同時套用許多角色，而且會使用一般的 Moose 角色結合系統。
我們建議使用這個函式來套用角色到物件。
這是當你呼叫 C<with> 時 Moose 內部所使用的。

=cut
