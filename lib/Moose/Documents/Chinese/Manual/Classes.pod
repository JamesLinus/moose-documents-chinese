package Moose::Documents::Chinese::Manual::Classes;

# ABSTRACT: 用 Moose 打造你的類別（和子類別）

__END__

=pod

=head1 使用 Moose

使用 Moose 很簡單，你只需要寫 C<use Moose>:

  package Person;

  use Moose;

那就是了，你已經用 Moose 建立類別！

這底下其實已經發生了許多事，讓我們看看。

當你載入 L<Moose>，一些語法糖衣函式被注入你的類別。
像是 C<extends>，C<has>，C<with>，和其他函式。
這些函式被用來定義你的類別。例如，你也許定義一個屬性...

  package Person;

  use Moose;

  has 'ssn' => ( is => 'rw' );

屬性在 L<Moose::Documents::Chinese::Manual::Attributes> 中有更多描述

載入 Moose 也會在該類別內啟用 C<strict> 和 C<warnings> 編譯指令。

當你載入 Moose，你的類別會變成 L<Moose::Object> 的子類別。
L<Moose::Object> 類別提供預設的建構子和解構子，還有物件建構輔助方法。
你可以在 L<Moose::Documents::Chinese::Manual::Construction> 了解更多。

方便起見，Moose 建立會為你的類別建立一個型別。
請參考 L<Moose::Documents::Chinese::Manual::Types> 了解更多關於型別的內容。

Moose 還會為你的類別建立一個 L<Moose::Meta::Class> 物件。
這個中介類別物件可以對你的類別呼叫 C<meta> 方法來取得，例如：C<< Person->meta >>。

這個中介類別物件提供一些反射類別 API 給你的類別。
Moose 本身也在底層使用它來加入屬性，定義父類別，等等。
事實上，所有的 Moose 糖衣都得呼叫這個中介類別物件（和其他中介 API 物件）來運作。

=head1 子類別

Moose 提供一個語法糖衣來宣告你的父類別，C<extends>：

  package User;

  use Moose;

  extends 'Person';

  has 'username' => ( is => 'rw' );

注意每次呼叫 C<extends> 會I<重置>你的父類別。
如果想要多重繼承，你必須一口氣提供所有的父類別，C<extends 'Foo', 'Bar'>。

你可以用 Moose 來繼承非 Moose 的父類別。
不過，當你這樣做，你會繼承到它的建構子（假設它也稱作 C<new>）。
這樣你會需要自己手動處理初始化屬性的過程，不論是在父類別的建構子裡或是在你的類別裡，你會無法使用許多 Moose 的魔法。

如果你對在 Moose 子類別中繼承非 Moose 的父類別有興趣，
可以參考 CPAN 上的 L<MooseX::NonMoose> 模組。

=head1 清除 Moose 的輸出

Moose 輸出一些函式到你的類別。
把這些語法糖衣從你的類別名稱空間移除是個好主意，這樣 C<< Person->can('has') >> 就不會為真。

要這樣作有許多方法。
我們建議使用 L<namespace::autoclean> 這個 CPAN 模組。
不只是移除 Moose 輸出的函式，也會移除其他模組帶入的函式。

  package Person;

  use namespace::autoclean;

  use Moose;

如果你完全不能使用 CPAN 模組（但是可以用 Moose？），你可以類別的最後面寫 C<no Moose>。
這會從你的類別移除所有 Moose 的輸出。

  package Person;

  use Moose;

  has 'ssn' => ( is => 'rw' );

  no Moose;

=head1 讓它跑快點

Moose 有「凍結」這樣的功能，可以用來讓類別在執行時期跑得快點。
不過這會在第一次載入時多花點時間。
當你讓你的類別凍結，這會告訴 Moose 你已經不再更動這個類別。
你不能再加入更多屬性，方法，角色等等。

這讓 Moose 針對你的類別產生程式碼。特別是會有個「行內」建構子，讓物件建構更快。

要讓你的物件凍結，只需對你的類別的中介類別物件呼叫 C<make_immutable> 

  __PACKAGE__->meta->make_immutable;

=head2 凍結與 C<new()>

如果你在你的類別中覆寫 C<new()>，那麼就不能借助凍結來對建構子最佳化你的類別。
反過來，你應該使用 C<BUILD> 方法，這會被行內建構子呼叫。

或者，如果你確實需要提供不同的 C<new()>，你可以提供你自己的凍結方法。
這需要擴充 Moose 中介類別，也超出這份手冊所能說明的部份了。

=cut
